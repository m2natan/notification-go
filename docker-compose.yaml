services:
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: notification-service
    env_file:
      - .env
    ports:
      - "${REST_PORT}:${REST_PORT}"
      - "${GRPC_PORT}:${GRPC_PORT}"
    depends_on:
      - postgres
      - kafka1
    environment:
      - GRPC_PORT=${GRPC_PORT}
      - HTTP_PORT=${REST_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=5432

  postgres:
    image: postgres:17.4-alpine
    container_name: notification-db
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  pgadmin:
    image: dpage/pgadmin4:8.5
    container_name: pgadmin
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"    # Internal Docker communication
      - "19091:19091"  # External Localhost access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9091,PLAINTEXT_HOST://0.0.0.0:19091
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9091,PLAINTEXT_HOST://localhost:19091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
      KAFKA_NUM_PARTITIONS: 3

    # healthcheck:
    #   test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka1:9091 --list || exit 1"]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 20
    #   start_period: 30s


volumes:
  postgres_data:
    name: notification-db-data
  pgadmin_data:
